{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport ShopActionTypes from './shop.types';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionAsync() {\n  yield console.log('I am fired');\n  const collectionRef = firestore.collection('collections'); //     collectionRef.get().then(snapshot =>{\n  //       const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //       dispatch(fetchCollectionsSuccess(collectionsMap))\n  //   })\n  //   .catch(error=>dispatch(fetchCollectionsFailure(error)))\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Programlama/Udemy Andrei yihua react 2/estore/farq-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","firestore","convertCollectionsSnapshotToMap","ShopActionTypes","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionAsync","console","log","collectionRef","collection","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AACA,SAAQC,SAAR,EAAkBC,+BAAlB,QAAwD,+BAAxD;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,uBAAR,EAAgCC,uBAAhC,QAA8D,gBAA9D;AAGA,OAAO,UAAUC,oBAAV,GAAgC;AACnC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB,CAHmC,CASvC;AACA;AACA;AACA;AACA;AAEC;AAGD,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMX,SAAS,CACXG,eAAe,CAACS,uBADL,EAEXN,oBAFW,CAAf;AAIH","sourcesContent":["import {takeEvery} from 'redux-saga/effects';\r\nimport {firestore,convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils'\r\nimport ShopActionTypes from './shop.types';\r\nimport {fetchCollectionsSuccess,fetchCollectionsFailure} from './shop.actions'\r\n\r\n\r\nexport function* fetchCollectionAsync(){\r\n    yield console.log('I am fired');\r\n\r\n    const collectionRef = firestore.collection('collections');\r\n\r\n\r\n\r\n    \r\n\r\n//     collectionRef.get().then(snapshot =>{\r\n//       const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n//       dispatch(fetchCollectionsSuccess(collectionsMap))\r\n//   })\r\n//   .catch(error=>dispatch(fetchCollectionsFailure(error)))\r\n\r\n}\r\n\r\n\r\nexport function* fetchCollectionsStart(){\r\n    yield takeEvery(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionAsync\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}